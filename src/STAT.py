# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _STAT
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _STAT.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _STAT.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _STAT.intArray___getitem__(*args)
    def __setitem__(*args): return _STAT.intArray___setitem__(*args)
    def cast(*args): return _STAT.intArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _STAT.intArray_frompointer
    if _newclass:frompointer = staticmethod(_STAT.intArray_frompointer)
intArray_swigregister = _STAT.intArray_swigregister
intArray_swigregister(intArray)
intArray_frompointer = _STAT.intArray_frompointer

STAT_UNKNOWN = _STAT.STAT_UNKNOWN
STAT_LOG_NONE = _STAT.STAT_LOG_NONE
STAT_LOG_FE = _STAT.STAT_LOG_FE
STAT_LOG_BE = _STAT.STAT_LOG_BE
STAT_LOG_CP = _STAT.STAT_LOG_CP
STAT_LOG_MRN = _STAT.STAT_LOG_MRN
STAT_FUNCTION_NAME_ONLY = _STAT.STAT_FUNCTION_NAME_ONLY
STAT_FUNCTION_AND_PC = _STAT.STAT_FUNCTION_AND_PC
STAT_FUNCTION_AND_LINE = _STAT.STAT_FUNCTION_AND_LINE
STAT_CR_FUNCTION_NAME_ONLY = _STAT.STAT_CR_FUNCTION_NAME_ONLY
STAT_CR_FUNCTION_AND_PC = _STAT.STAT_CR_FUNCTION_AND_PC
STAT_CR_FUNCTION_AND_LINE = _STAT.STAT_CR_FUNCTION_AND_LINE
STAT_LAUNCH = _STAT.STAT_LAUNCH
STAT_ATTACH = _STAT.STAT_ATTACH
STAT_VERBOSE_ERROR = _STAT.STAT_VERBOSE_ERROR
STAT_VERBOSE_STDOUT = _STAT.STAT_VERBOSE_STDOUT
STAT_VERBOSE_FULL = _STAT.STAT_VERBOSE_FULL
STAT_TOPOLOGY_DEPTH = _STAT.STAT_TOPOLOGY_DEPTH
STAT_TOPOLOGY_FANOUT = _STAT.STAT_TOPOLOGY_FANOUT
STAT_TOPOLOGY_USER = _STAT.STAT_TOPOLOGY_USER
STAT_TOPOLOGY_AUTO = _STAT.STAT_TOPOLOGY_AUTO
STAT_OK = _STAT.STAT_OK
STAT_SYSTEM_ERROR = _STAT.STAT_SYSTEM_ERROR
STAT_MRNET_ERROR = _STAT.STAT_MRNET_ERROR
STAT_FILTERLOAD_ERROR = _STAT.STAT_FILTERLOAD_ERROR
STAT_GRAPHLIB_ERROR = _STAT.STAT_GRAPHLIB_ERROR
STAT_ALLOCATE_ERROR = _STAT.STAT_ALLOCATE_ERROR
STAT_ATTACH_ERROR = _STAT.STAT_ATTACH_ERROR
STAT_DETACH_ERROR = _STAT.STAT_DETACH_ERROR
STAT_SEND_ERROR = _STAT.STAT_SEND_ERROR
STAT_SAMPLE_ERROR = _STAT.STAT_SAMPLE_ERROR
STAT_TERMINATE_ERROR = _STAT.STAT_TERMINATE_ERROR
STAT_FILE_ERROR = _STAT.STAT_FILE_ERROR
STAT_LMON_ERROR = _STAT.STAT_LMON_ERROR
STAT_ARG_ERROR = _STAT.STAT_ARG_ERROR
STAT_VERSION_ERROR = _STAT.STAT_VERSION_ERROR
STAT_NOT_LAUNCHED_ERROR = _STAT.STAT_NOT_LAUNCHED_ERROR
STAT_NOT_ATTACHED_ERROR = _STAT.STAT_NOT_ATTACHED_ERROR
STAT_NOT_CONNECTED_ERROR = _STAT.STAT_NOT_CONNECTED_ERROR
STAT_NO_SAMPLES_ERROR = _STAT.STAT_NO_SAMPLES_ERROR
STAT_WARNING = _STAT.STAT_WARNING
STAT_LOG_MESSAGE = _STAT.STAT_LOG_MESSAGE
STAT_STDOUT = _STAT.STAT_STDOUT
STAT_VERBOSITY = _STAT.STAT_VERBOSITY
STAT_STACKWALKER_ERROR = _STAT.STAT_STACKWALKER_ERROR
STAT_PAUSE_ERROR = _STAT.STAT_PAUSE_ERROR
STAT_RESUME_ERROR = _STAT.STAT_RESUME_ERROR
STAT_DAEMON_ERROR = _STAT.STAT_DAEMON_ERROR
STAT_APPLICATION_EXITED = _STAT.STAT_APPLICATION_EXITED
STAT_PENDING_ACK = _STAT.STAT_PENDING_ACK
class STAT_FrontEnd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STAT_FrontEnd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STAT_FrontEnd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _STAT.new_STAT_FrontEnd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _STAT.delete_STAT_FrontEnd
    __del__ = lambda self : None;
    def attachAndSpawnDaemons(*args): return _STAT.STAT_FrontEnd_attachAndSpawnDaemons(*args)
    def launchAndSpawnDaemons(*args): return _STAT.STAT_FrontEnd_launchAndSpawnDaemons(*args)
    def launchMrnetTree(*args): return _STAT.STAT_FrontEnd_launchMrnetTree(*args)
    def connectMrnetTree(*args): return _STAT.STAT_FrontEnd_connectMrnetTree(*args)
    def attachApplication(*args): return _STAT.STAT_FrontEnd_attachApplication(*args)
    def pause(*args): return _STAT.STAT_FrontEnd_pause(*args)
    def resume(*args): return _STAT.STAT_FrontEnd_resume(*args)
    def isRunning(*args): return _STAT.STAT_FrontEnd_isRunning(*args)
    def sampleStackTraces(*args): return _STAT.STAT_FrontEnd_sampleStackTraces(*args)
    def gatherLastTrace(*args): return _STAT.STAT_FrontEnd_gatherLastTrace(*args)
    def gatherTraces(*args): return _STAT.STAT_FrontEnd_gatherTraces(*args)
    def getLastDotFilename(*args): return _STAT.STAT_FrontEnd_getLastDotFilename(*args)
    def shutDown(*args): return _STAT.STAT_FrontEnd_shutDown(*args)
    def detachApplication(*args): return _STAT.STAT_FrontEnd_detachApplication(*args)
    def terminateApplication(*args): return _STAT.STAT_FrontEnd_terminateApplication(*args)
    def printMsg(*args): return _STAT.STAT_FrontEnd_printMsg(*args)
    def startLog(*args): return _STAT.STAT_FrontEnd_startLog(*args)
    def receiveAck(*args): return _STAT.STAT_FrontEnd_receiveAck(*args)
    def statBenchCreateStackTraces(*args): return _STAT.STAT_FrontEnd_statBenchCreateStackTraces(*args)
    def getNodeInEdge(*args): return _STAT.STAT_FrontEnd_getNodeInEdge(*args)
    def printCommunicationNodeList(*args): return _STAT.STAT_FrontEnd_printCommunicationNodeList(*args)
    def printApplicationNodeList(*args): return _STAT.STAT_FrontEnd_printApplicationNodeList(*args)
    def getLauncherPid(*args): return _STAT.STAT_FrontEnd_getLauncherPid(*args)
    def getNumApplProcs(*args): return _STAT.STAT_FrontEnd_getNumApplProcs(*args)
    def getNumApplNodes(*args): return _STAT.STAT_FrontEnd_getNumApplNodes(*args)
    def setJobId(*args): return _STAT.STAT_FrontEnd_setJobId(*args)
    def getJobId(*args): return _STAT.STAT_FrontEnd_getJobId(*args)
    def getApplExe(*args): return _STAT.STAT_FrontEnd_getApplExe(*args)
    def setToolDaemonExe(*args): return _STAT.STAT_FrontEnd_setToolDaemonExe(*args)
    def getToolDaemonExe(*args): return _STAT.STAT_FrontEnd_getToolDaemonExe(*args)
    def setOutDir(*args): return _STAT.STAT_FrontEnd_setOutDir(*args)
    def getOutDir(*args): return _STAT.STAT_FrontEnd_getOutDir(*args)
    def setFilePrefix(*args): return _STAT.STAT_FrontEnd_setFilePrefix(*args)
    def getFilePrefix(*args): return _STAT.STAT_FrontEnd_getFilePrefix(*args)
    def setProcsPerNode(*args): return _STAT.STAT_FrontEnd_setProcsPerNode(*args)
    def getProcsPerNode(*args): return _STAT.STAT_FrontEnd_getProcsPerNode(*args)
    def setFilterPath(*args): return _STAT.STAT_FrontEnd_setFilterPath(*args)
    def getFilterPath(*args): return _STAT.STAT_FrontEnd_getFilterPath(*args)
    def getRemoteNode(*args): return _STAT.STAT_FrontEnd_getRemoteNode(*args)
    def addLauncherArgv(*args): return _STAT.STAT_FrontEnd_addLauncherArgv(*args)
    def getLauncherArgv(*args): return _STAT.STAT_FrontEnd_getLauncherArgv(*args)
    def getLauncherArgc(*args): return _STAT.STAT_FrontEnd_getLauncherArgc(*args)
    def setVerbose(*args): return _STAT.STAT_FrontEnd_setVerbose(*args)
    def getVerbose(*args): return _STAT.STAT_FrontEnd_getVerbose(*args)
    def getLastErrorMessage(*args): return _STAT.STAT_FrontEnd_getLastErrorMessage(*args)
    def addPerfData(*args): return _STAT.STAT_FrontEnd_addPerfData(*args)
    def getInstallPrefix(*args): return _STAT.STAT_FrontEnd_getInstallPrefix(*args)
    def getVersion(*args): return _STAT.STAT_FrontEnd_getVersion(*args)
STAT_FrontEnd_swigregister = _STAT.STAT_FrontEnd_swigregister
STAT_FrontEnd_swigregister(STAT_FrontEnd)



