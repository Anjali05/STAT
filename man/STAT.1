.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "STAT" "1" "01 April 2011" "" ""

.SH NAME
STAT \- invoke the Stack Trace Analysis Tool.
.SH SYNOPSIS

\fBSTAT\fR [ \fB\fIOPTIONS\fB\fR ] \fB\fIPID\fB\fR


\fBSTAT\fR [ \fB\fIOPTIONS\fB\fR ] \fB-C\fR \fB\fICOMMAND\fB\fR\fI ...\fR

.PP
where

.nf
    

 [ \fB\fIOPTIONS\fB\fR ]


    represents zero or more STAT options.
    

 \fB\fIPID\fB\fR

 
    is the PID of the parallel job launcher for the target application to attach to.
    

 \fB\fICOMMAND\fB\fR\fI ...\fR

 
    is the command to launch the application.
    
.fi
.SH "DESCRIPTION"
.PP
STAT (the Stack Trace Analysis Tool) is a highly scalable, lightweight tool that gathers and merges stack traces from all of the processes of a parallel application.  After running the STAT command, STAT will create a STAT_results directory in your current working directory.  This directory will contain a subdirectory, based on your parallel application's executable name, with the merged stack traces in DOT format.
.SH "OPTIONS"
.TP
\fB-a, --autotopo\fR
let STAT automatically create topology.
.TP
\fB-f, --fanout \fIwidth\fB\fR
Sets the maximum tree topology fanout to \fIwidth\fR\&.  Specify nodes to launch communications processes on with \fB--nodes\fR\&.
.TP
\fB-d, --depth \fIdepth\fB\fR
Sets the tree topology depth to \fIdepth\fR\&.  This option takes precedence over the \fB--fanout\fR option.  Specify nodes to launch communications processes on with \fB--nodes\fR\&.
.TP
\fB-u, --usertopology \fItopology\fB\fR
Specify the number of communication nodes per layer in the tree topology, separated by dashes, with \fItopology\fR\&.  This option takes precedence over the \fB--fanout\fR and \fB--depth\fR options.  Specify nodes to launch communications processes on with \fB--nodes\fR\&.  Example topologies: 4, 4-16, 5-20-75.
.TP
\fB-n, --nodes \fInodelist\fB\fR
Use the specified nodes in \fInodelist\fR\&.  To be used with \fB--fanout\fR, \fB--depth\fR, or \fB--usertopology\fR\&.  Example nodes lists: host1; host1,host2; host[1,5-7,9].
.TP
\fB-p, --procs \fIprocesses\fB\fR
Sets the maximum number of communication processes to be spawned per node to \fIprocesses\fR\&.  This should typically be set to the number of CPUs per node.
.TP
\fB-j, --jobid \fIid\fB\fR
Append \fIid\fR to the output directoory and file prefixes.  This is useful for associating STAT results with a batch job.
.TP
\fB-r, --retries \fIcount\fB\fR
Attempt \fIcount\fR retries per sample to try to get a complete stack trace.
.TP
\fB-R, --retryfreq \fIfrequency\fB\fR
Wait \fIfrequency\fR milliseconds between sample retries.  To be used with the \fB--retries\fR option.
.TP
\fB-P, --withpc\fR
Sample program counter values in addition to function names.
.TP
\fB-i, --withline\fR
Sample source line number in addition to function names.
.TP
\fB-c, --comprehensive\fR
Gather 4 traces: function only; function + line; function + PC; and 3D function only.
.TP
\fB-w, --withthreads\fR
Sample helper threads in addition to the main thread.
.TP
\fB-t, --traces \fIcount\fB\fR
Gather \fIcount\fR traces per process.
.TP
\fB-T, --tracefreq \fIfrequency\fB\fR
Wait \fIfrequency\fR milliseconds between samples.  To be used with the \fB--traces\fR option.
.TP
\fB-S, --sampleindividual\fR
Save all individual samples in addition to the 3D trace when using \fB--traces\fR option.
.TP
\fB-C, --create \fIarg_list\fB\fR
Launch the application under STAT's control.  All arguments after -C are used to launch the app.  Namely, \fIarg_list\fR is the command that you would normally use to launch your application.
.TP
\fB-D, --daemon \fIpath\fB\fR
Specify the full path \fIpath\fR to the STAT daemon executable.  Use this only if you wish to override the default.
.TP
\fB-F, --filter \fIpath\fB\fR
Specify the full path \fIpath\fR to the STAT filter shared object.  Use this only if you wish to override the default.
.TP
\fB-s, --sleep \fItime\fB\fR
Sleep for \fItime\fR seconds before attaching and gathering traces.  This gives the application time to get to a hung state.
.TP
\fB-l, --log    \fIFE\fB | \fIBE\fB | \fIALL\fB  \fR
Enable debug logging of the \fIFE\fR, \fIBE\fR, or \fIALL\fR\&.
.TP
\fB-L, --logdir \fIlog_directory\fB\fR
Dump logging output into \fIlog_directory\fR\&.  To be used with the \fB--log\fR option.
.SH "EXAMPLE"
.PP
The most typical usage is to invoke STAT on the job launcher's PID:
.PP

.nf
  % srun mpi_application arg1 arg2 &
  [1] 16482
  
  % ps
    PID TTY          TIME CMD
  16755 pts/0    00:00:00 bash
  16842 pts/0    00:00:00 srun
  16871 pts/0    00:00:00 ps
  
  % STAT 16482
    
.fi
.PP
You can also launch your application under STAT's control with the -C option.  All arguments after -C are used for job launch:
.PP

.nf
  % STAT -C srun mpi_application arg1 arg2
    
.fi
.PP
With the -a option (or when automatic topology is set as default), STAT will try to automatically create a scalable topology for large scale jobs.  However, if you wish you may manually specify a topology at larger scales.  For example, if you're running on 1024 nodes, you may want to try a fanout of sqrt(1024) = 32.  You will need to specify a list of nodes that contains enough processors to accommodate the ceil(1024/32) = 32 communication processes being launched with the --nodes option.  Be sure that you have login permissions to the specified nodes and that they contain the mrnet_commnode executable and the STAT_FilterDefinitions.so library.
.PP

.nf
  % STAT --fanout 32 --nodes atlas[1-4] --procs 8 16482
    
.fi
.PP
Upon successful completion, STAT will write its output to a STAT_results directory within the current working directory.  Each run creates a subdirectory named after the application with a unique integer ID.  STAT's output indicates the directory created with a message such as:
.PP

.nf
  Results written to /home/user/bin/STAT_results/mpi_application.6
    
.fi
.PP
Within that directory will be one or more files with a .dot extension.  These .dot files can be viewed with \fBSTATview\fR\&.
.SH "AUTHOR"
.PP
Written by Gregory L. Lee 
<lee218@llnl.gov>
.SH "COPYRIGHT"
.PP
Copyright 2008 Lawrence Livermore National Laboratory
.PP
This is free software; see the source for copying conditions.  There is NO warranty; not even for MECHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.PP
\fBSTATGUI\fR(1), \fBSTATview\fR(1), \fBSTATBench\fR(1)
