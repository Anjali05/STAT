.TH STATBench "1" "MARCH 2008" "STAT" "The Stack Trace Analysis Tool Benchmark"

.SH NAME
STATBench \- invokes the Stack Trace Analyssi Tool Benchmark

.SH SYNOPSIS
.TP
\fBSTAT\fR \fB[\fR\fIOPTIONS\fR\fB]\fR  where:
.TP
is the PID of the parallel job launcher of the application
.TP
\fIOPTIONS\fR
represent zero or more STAT options.

.SH DESCRIPTION
The Stack Trace Analysis Tool is a highly scalable, lightweight tool that gathers and merges stack traces from all of the processes of a parallel application.  STATBench is a benchmark that can emulate STAT's performance.  By utilizing your entire parallel allocation (launching a STATBench daemon emulator per core) and generating artificial stack traces, STATBench is able model STAT's performance using less resources than a STAT run.  With various options, you can also map STATBench to your target machine architecture and target application.  After completion, STATBench will create a STAT_results directory in your current working directory.  This directory will contain a subdirectory for the current run, with the merged stack traces in DOT and GML formats as well as a performance results text file.

.SH OPTIONS
.TP
\fB\-a\fR, \fB\-\-autotopo\fR 
let STAT automatically create topology.
.TP
\fB\-f\fR, \fB\-\-fanout\fR \fIwidth\fR
Sets the maximum tree topology fanout to \fIwidth\fR. Specify nodes to launch communication processes on with \fB\-\-nodes\fR.
.TP
\fB\-d\fR, \fB\-\-depth\fR \fIdepth\fR
Sets the tree topology depth to \fIdepth\fR.  This option takes precedence over the \fB\-\-fanout\fR option. Specify nodes to launch communication processes on with \fB\-\-nodes\fR.
.TP
\fB\-u\fR, \fB\-\-usertopology\fR \fItopology\fR
Specify the number of communication nodes per layer in the tree topology, separated by dashes, with \fItopology\fR. This option takes precedence over the \fB\-\-fanout\fR and \fB\-\-depth\fR options. Specify nodes to launch communication processes on with \fB\-\-nodes\fR. Example topologies: 4, 4-16, 5-20-75. 
.TP
\fB\-n\fR, \fB\-\-nodes\fR \fInodelist\fR
Use the specified nodes in \fInodelist\fR for communication processes. To be used with \fB\-\-fanout\fR, \fB\-\-depth\fR, or \fB\-\-usertopology\fR. Example node lists: host1; host1,host2; host[1,5-7,9].
.TP
\fB\-p\fR, \fB\-\-procs\fR \fIprocesses\fR
Sets the maximum number of communication processes to be spawned per node to \fIprocesses\fR.  This should typically set to the number of CPUs per node.
.TP
\fB\-d\fR, \fB\-\-daemon\fR \fIpath\fR
Where \fIpath\fR specifies the full path to a STAT daemon executable.  Use this only if you wish to override the default.
.TP
\fB\-F\fR, \fB\-\-filter\fR \fIpath\fR
Where \fIpath\fR specifies the full path to the STAT filter shared object.  Use this only if you wish to override the default.
.TP
\fB\-t\fR, \fB\-\-traces\fR \fIcount\fR 
generate \fIcount\fB traces.
.TP
\fB\-i\fR\fR, \fB\-\-iters\fR \fIcount\fR
perform \fIcount\fR gathers.
.TP
\fB\-n\fR, \fB\-\-numtasks\fR \fIcount\fR
emulate \fIcount\fR tasks per daemon.
.TP
\fB\-m\fR, \fB\-\-maxdepth\fR \fIdepth\fR
generate traces with a maximum depth of \fIdepth\fR.
.TP
\fB\-b\fR, \fB\-\-branch\fR \fIwidth\fR
generate traces with a max branching factor of \fIwidth\fR.
.TP
\fB\-e\fR, \fB\-\-eqclasses\fR \fIcount\fR
generate traces within \fIcount\fR equivalent classes.
.TP
\fB\-l\fR, \fB\-\-log\fR [\fIFE\fR|\fIBE\fR|\fIALL\fR]\fR 
Enable debug logging of the \fIFE\fR, \fIBE\fR, or \fIALL\fR 
.TP
\fB\-L\fR, \fB\-\-logdir \fIlog_directory\fR
Dump logging output into \fIlog_directory\fR.  To be used with the \fB\-\-log\fR option.

.SH EXAMPLES
In the simplest form, you can invoke STATBench, from within a parallel allocation, with no arguments.  This will run through with the default settings:
.nf

  > STATBench
.fi
.PP
To model your target machine architecture, you can specify the number of tasks to emulate per daemon.  For instance if your target machine has 16-way SMP compute nodes:
.nf

  > STATBench --numtasks 16
.fi
.PP
You may also want to model a specific application.  For instance, you may have a cilmate modeling code with 5 distinct task behaviors, or equivalence classes.  You can also specify the maximum call depth of your application, the average branching factor from a given function, and the number of distinct traces expected per task:
.nf

  > STATBench --eqclasses 5 --maxdepth 17 --branch 5 --traces 4
.fi
.PP
At larger scales, you may want to employ a more scalable tree topology.  For example, if you're running 1024 daemon emulators, you may want to try a fanout of sqrt(1024) = 32.  You will need to specify a list of nodes that contains enough processors to accomodate the ceil(1024/32) = 32 communication processes being launched.  Be sure that you have login permissions to the specified nodes and that they contain the mrnet_commnode executable and the STAT_FilterDefinitions.so library:
.nf

  > STATBench --fanout 32 atlas[1-4] --procs 8
.fi
.PP
You may want to run STATBench at larger scales using a flat topology for performance comparision to a more scalable tree topology.  However, this requires the STAT front-end to open one socket connection per STAT daemon.  You will probably need to increase your limit on open file descriptors:

In bash:

  > ulimit -n 4096

In csh:

  > limit descriptors 4096
.fi

.SH AUTHOR
Written by Gregory L. Lee.

.SH COPYRIGHT
Copyright \(co 2008 Lawrence Livermore National Laboratory.
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MECHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

.SH "SEE ALSO"
.BR STAT (1), STATview (1).
