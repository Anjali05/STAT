language: c
cache:
  directories:
    - $HOME/local

sudo: required

dist: trusty

compiler:
  - gcc

addons:
  apt:
    hostname: travistest
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - libelf-dev
      - libdwarf-dev
      - libboost-all-dev
      - libopenmpi-dev
      - swig
      - graphviz
      - munge
      - gfortran
      - gdb

env:
  global:
    - export PATH=$HOME/local/bin:$PATH
    - export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH
    - export CXXFLAGS=-std=c++11

install:
  # Build STAT's dependences

  # Check for cached builds:
  - mkdir -p $HOME/local
  - ls -l $HOME/local
  - ls -l $HOME/local/lib
  - ls -l $HOME/local/bin
  - ls -l $HOME/local/include

  # This should all be cached, so only run commands below when we want to update the cache
#  - export VERBOSE=1
#  - export V=1
#  # Download and install OpenMPI v2.0.2
#  - cd $HOME/build
#  - wget https://www.open-mpi.org/software/ompi/v2.0/downloads/openmpi-2.0.2.tar.gz
#  - tar xf openmpi-2.0.2.tar.gz
#  - cd openmpi-2.0.2
#  - ./configure --prefix=$HOME/local
#  - make && make install
#
#  # Download and install LaunchMON
#  - cd $HOME/build
#  - wget https://github.com/LLNL/LaunchMON/releases/download/v1.0.2/launchmon-v1.0.2.tar.gz
#  - tar xf launchmon-v1.0.2.tar.gz
#  - cd launchmon-v1.0.2
#  - mkdir build && cd build
#  - ../configure --prefix=$HOME/local --with-test-rm=orte --with-test-ncore-per-CN=2
#  - make && make install
#
#  # Download and install Graphlib
#  - cd $HOME/build
#  - wget https://github.com/LLNL/graphlib/archive/v3.0.0.tar.gz -O graphlib-v3.0.0.tar.gz
#  - tar xf graphlib-v3.0.0.tar.gz
#  - cd graphlib-3.0.0
#  - mkdir build && cd build
#  - cmake -D CMAKE_INSTALL_PREFIX=$HOME/local ..
#  - make && make install
#
#  # Download and Install MRNet
#  - cd $HOME/build
#  - wget https://github.com/dyninst/mrnet/archive/MRNet-4_1_0.tar.gz
#  - tar xf MRNet-4_1_0.tar.gz
#  - cd mrnet-MRNet-4_1_0
#  - ./configure --prefix=$HOME/local --enable-shared
#  - make && make install
#
#  # Download and Install Libdwarf
#  - cd $HOME/build
#  - wget https://www.prevanders.net/libdwarf-20161124.tar.gz
#  - tar xf libdwarf-20161124.tar.gz
#  - cd dwarf-20161124/libdwarf
#  - ./configure --prefix=$HOME/local --enable-shared --disable-nonshared
#  - make -j 8
#  - cp libdwarf.so $HOME/local/lib
#  - cp libdwarf.so.1 $HOME/local/lib
#  - cp libdwarf.h  $HOME/local/include
#  - cp dwarf.h $HOME/local/include
#
#  # Download and Install DynInst
#  - cd $HOME/build
#  - wget https://github.com/dyninst/dyninst/archive/v9.3.0.tar.gz -O dyninst-v9.3.0.tar.gz
#  - tar xf dyninst-v9.3.0.tar.gz
#  - cd dyninst-9.3.0
#  - mkdir build && cd build
#  - cmake -D CMAKE_INSTALL_PREFIX=$HOME/local -D LIBDWARF_INCLUDE_DIR=$HOME/local/include -D LIBDWARF_LIBRARIES=$HOME/local/lib/libdwarf.so ..
#  - make || nm common/CMakeFiles/common.dir/src/dyn_regs.C.o
#  - make install
#  - cp libiberty/libiberty.a $HOME/local/lib

script:
  - cd $HOME/build/LLNL/STAT
  - ./bootstrap
  - export LDFLAGS=-Wl,-no-as-needed
  - ./configure --prefix=$HOME/stat --with-stackwalker=$HOME/local --with-mrnet=$HOME/local --with-graphlib=$HOME/local --with-launchmon=$HOME/local --with-libdwarf=$HOME/local --with-libiberty=$HOME/local --enable-debug || cat config.log
  - make && make install

after_script:
  - ls -l $HOME/stat/bin
  - $HOME/stat/bin/stat-cl -h
  - export STAT_XPLAT_RSH=rsh
  - export XPLAT_RSH=rsh
  - export XPLAT_RSH_ARGS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
  - ssh-keygen -N '' -t rsa -f $HOME/.ssh/id_rsa
  - cat $HOME/.ssh/id_rsa.pub > $HOME/.ssh/authorized_keys
  - ssh-keygen -N '' -t dsa -f $HOME/.ssh/id_dsa
  - cat $HOME/.ssh/id_dsa.pub >> $HOME/.ssh/authorized_keys
  - cat $HOME/.ssh/authorized_keys
#  - rsh `hostname` hostname & export RSHPID=$! ; sleep 5; kill -9 $RSHPID
  - rsh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no `hostname` hostname  & export RSHPID=$! ; sleep 5; kill -9 $RSHPID
  - echo -e "Host $HOSTNAME\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  - cat ~/.ssh/config
  - cat ~/.ssh/known_hosts
#  - export MRNET_OUTPUT_LEVEL=5
  - echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
  - $HOME/stat/share/stat/examples/bin/rank_test 10 & $HOME/stat/bin/stat-cl -s 2 -l FE -l BE -L $HOME -I $!
  - cat stat_results/output.0000/output.0000.top
  - cat stat_results/output.0000/output.0000.fulltop
  - cat $HOME/$HOSTNAME.STAT.log
  - cat $HOME/$HOSTNAME.STATD.log
  - cat stat_results/output.0000/00_output.0000.2D.dot
  - cat stat_results/output.0000/01_output.0000.2D.dot
  - cat stat_results/output.0000/02_output.0000.2D.dot
  - cat stat_results/output.0000/03_output.0000.2D.dot
  - cat stat_results/output.0000/04_output.0000.3D.dot
  - which mpirun
  - export LMON_FE_ENGINE_TIMEOUT=20
  - mpirun -n 4 $HOME/stat/share/stat/examples/bin/mpi_ringtopo 40 & $HOME/stat/bin/stat-cl -s 2 -l FE -l BE -L $HOME $!
  - wait $!
  - cat stat_results/mpi_ringtopo.0000/mpi_ringtopo.0000.top
  - cat stat_results/mpi_ringtopo.0000/mpi_ringtopo.0000.fulltop
  - cat stat_results/mpi_ringtopo.0000/00_mpi_ringtopo.0000.2D.dot
  - cat stat_results/mpi_ringtopo.0000/01_mpi_ringtopo.0000.2D.dot
  - cat stat_results/mpi_ringtopo.0000/02_mpi_ringtopo.0000.2D.dot
  - cat stat_results/mpi_ringtopo.0000/03_mpi_ringtopo.0000.2D.dot
  - cat stat_results/mpi_ringtopo.0000/04_mpi_ringtopo.0000.3D.dot
  - cat $HOME/$HOSTNAME.STAT.log
#  - $HOME/stat/bin/stat-cl -s 5 -l FE -l BE -L $HOME -C mpirun -n 4 $HOME/stat/share/stat/examples/bin/mpi_ringtopo 40
#  - cat $HOME/$HOSTNAME.STAT.log
#  - sleep 40
#  - $HOME/stat/bin/stat-script $HOME/stat/share/stat/examples/bin/script_test.py
