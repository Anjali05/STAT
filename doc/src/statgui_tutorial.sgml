<para>
After launching the GUI via the <command>STATGUI</command> command you will first need to attach to the application via the <guibutton>Attach</guibutton> button.  This will bring up the attach dialog (<xref linkend="statgui_attach_dialog">).  You will need to select the job launcher (i.e., <command>mpirun</command>, <command>srun</command>, or equivalent process).  STAT will list processes owned by you on the localhost.  If your job launcher process is on a remote host, you will need to enter that hostname in the remote host text entry box.  Contact your local system administrator if you are not sure where to find your job launcher process.  Once the appropriate process has been selected, click on the <guibutton>Attach</guibutton> in the lower right hand corner.  STAT will then launch its daemons and gather an initial stack trace.
</para>
<figure id="statgui_attach_dialog">
    <title>Use the attach dialog to select the job launcher process to attach to.</title>
    <mediaobject><imageobject>
    <imagedata scale="50" fileref="figs/statgui_attach_dialog.png">
    </imageobject></mediaobject>
</figure>
<para>
Once STAT has displayed the initial merged stack trace, in the form of a prefix tree, first you may want to look for common buggy patterns.  This can be accomplished by using the analysis buttons in the toolbar across the top of the window.  This includes operations to look for outliers such as processes with the shortest or longest stack trace or for the stack trace that was exhibited by the least or most processes.  Note that these buttons are "traversal" buttons and they all initially operate on the full prefix tree.  For example, the first click of the <guibutton>[Shortest] Path</guibutton> button will display the shortest path and subsequent clicks will display the next shortest path.  Oftentimes bugs in parallel applications are triggered by a single or small subset of outliers in which case the <guibutton>[Least] Tasks</guibutton> button can quickly identify the outliers.  Another common behavior is for a small subset of processes to be hung and the rest of the processes to be blocked in an MPI barrier or collective.  In this case, the hung subset of tasks may have a shorter call path than the tasks in blocking in MPI, since the MPI implementation will usually be several frames deep.  In this case, the <guibutton>[Shortest] Path</guibutton> can be useful.
</para>
<figure id="statgui_bgl208k_screenshot">
    <title>A screenshot of the STAT GUI.</title>
    <mediaobject><imageobject>
    <imagedata scale="40" fileref="figs/statgui_bgl208k_screenshot.png">
    </imageobject></mediaobject>
</figure>
<para>
Alternatively, you may wish to manually search through the stack traces.  There are several buttons to aid in this process too.  The <guibutton>[Traverse] Eq C</guibutton> will traverse the prefix tree, with each click traversing the down to the next point where there is a branch in equivalence classeses.  Another helpful button is the <guibutton>[Cut] MPI</guibutton> button, which will cut any frames below an MPI function call, thus allowing you to focus on application code as opposed to the MPI implementation stack frames.  There are also buttons to search for specific MPI ranks or for stack frames with specified text.  Finally, left or right clicking on a node in the prefix tree gives you the option to expand or collapse the prefix tree.  Note also that you can zoom in and out of the prefix tree using the options in the <guibutton>View</guibutton> menu or by using the scroll button on your mouse.  You can also hold the left mouse button to "grab" the whitespace in the displayed prefix tree and move the focus around.
</para>
<para>
By default, the initial sample will gather stack traces at the granularity of function names.  You can gather an additional sample with more detail, by clicking on the <guibutton>Sample</guibutton> button and selecting the <guibutton>function and line</guibutton> radio button.  Note this typically requires that the code be compiled with the -g flag to get the appropriate debug information.  After clicking <guibutton>OK</guibutton> a new prefix tree will be generated.  By gathering stack traces with line number information, you may now associate stack traces back to the source code using the <guibutton>View Source</guibutton> button after clicking on a node in the prefix tree (<xref linkend="statgui_source_view">).
</para>
<figure id="statgui_source_view">
    <title>A screenshot of the source view window.</title>
    <mediaobject><imageobject>
    <imagedata scale="40" fileref="figs/statgui_source_view.png">
    </imageobject></mediaobject>
</figure>
<para>
STAT was not intended to be a full-featured debugger, so you may ultimately need to employ another debugger such as DDT or TotalView for root cause analysis.  STAT includes an interface to launch either of these debuggers (where available) on a subset of the MPI tasks based on the equivalence classes that STAT identifies.  This interface can be accessed through the <guibutton>[Identify] Eq C</guibutton> button in the upper right hand corner of the window.  In order to allow the other debuggers to attach, STAT will first detach itself from the application.  Pinpointing a bug may require several iterations of running STAT on the entire application and running a full-featured debugger on a subset.  After detaching a full-featured debugger, you can quickly attach to your application again with the <guibutton>ReAttach</guibutton> button.
</para>
